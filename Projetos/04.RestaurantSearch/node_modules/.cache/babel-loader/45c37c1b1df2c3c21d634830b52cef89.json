{"ast":null,"code":"var _jsxFileName = \"/Users/marlavidal/Downloads/Educac\\u0327a\\u0303o/DIO (Digital Innovation One)/bootcamp/Impulso React Web Developer/projetos/restaurants-search/src/components/Map/index.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleApiWrapper, Map, Marker } from 'google-maps-react';\nimport { setRestaurants, setRestaurant } from '../../redux/modules/restaurants';\nexport const MapContainer = props => {\n  const dispatch = useDispatch();\n  const [map, setMap] = useState(null);\n  const {\n    restaurants\n  } = useSelector(state => state.restaurants);\n  const {\n    google,\n    query,\n    placeId\n  } = props;\n  const searchByQuery = useCallback((map, query) => {\n    const service = new google.maps.places.PlacesService(map);\n    dispatch(setRestaurants([]));\n    const request = {\n      location: map.center,\n      radius: '200',\n      type: ['restaurant'],\n      query\n    };\n    service.textSearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        dispatch(setRestaurants(results));\n      }\n    });\n  }, [dispatch, google]);\n  const getDetails = useCallback(placeId => {\n    const service = new google.maps.places.PlacesService(map);\n    dispatch(setRestaurant(null));\n    const request = {\n      placeId,\n      fields: ['name', 'opening_hours', 'formatted_address', 'formatted_phone_number']\n    };\n    service.getDetails(request, (place, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        dispatch(setRestaurant(place));\n      }\n    });\n  }, [google, map, dispatch]);\n  useEffect(() => {\n    if (query) {\n      searchByQuery(map, query);\n    }\n  }, [searchByQuery, query, map]);\n  useEffect(() => {\n    if (placeId) {\n      getDetails(placeId);\n    }\n  }, [placeId, getDetails]);\n\n  const searchNearby = (map, center) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      location: center,\n      radius: '20000',\n      type: ['restaurant']\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        dispatch(setRestaurants(results));\n      }\n    });\n  };\n\n  function onMapReady(_, map) {\n    setMap(map);\n    searchNearby(map, map.center);\n  }\n\n  return /*#__PURE__*/React.createElement(Map, Object.assign({\n    google: google,\n    centerAroundCurrentLocation: true,\n    onReady: onMapReady,\n    onRecenter: onMapReady,\n    zoom: 15\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }), restaurants.map(restaurant => /*#__PURE__*/React.createElement(Marker, {\n    key: restaurant.place_id,\n    name: restaurant.name,\n    position: {\n      lat: restaurant.geometry.location.lat(),\n      lng: restaurant.geometry.location.lng()\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })));\n};\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n  language: 'pt-BR'\n})(MapContainer);","map":{"version":3,"sources":["/Users/marlavidal/Downloads/Educação/DIO (Digital Innovation One)/bootcamp/Impulso React Web Developer/projetos/restaurants-search/src/components/Map/index.jsx"],"names":["React","useState","useEffect","useCallback","useDispatch","useSelector","GoogleApiWrapper","Map","Marker","setRestaurants","setRestaurant","MapContainer","props","dispatch","map","setMap","restaurants","state","google","query","placeId","searchByQuery","service","maps","places","PlacesService","request","location","center","radius","type","textSearch","results","status","PlacesServiceStatus","OK","getDetails","fields","place","searchNearby","nearbySearch","onMapReady","_","restaurant","place_id","name","lat","geometry","lng","apiKey","process","env","REACT_APP_GOOGLE_API_KEY","language"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleApiWrapper, Map, Marker } from 'google-maps-react';\n\nimport { setRestaurants, setRestaurant } from '../../redux/modules/restaurants';\n\nexport const MapContainer = (props) => {\n  const dispatch = useDispatch();\n  const [map, setMap] = useState(null);\n  const { restaurants } = useSelector((state) => state.restaurants);\n  const { google, query, placeId } = props;\n\n  const searchByQuery = useCallback(\n    (map, query) => {\n      const service = new google.maps.places.PlacesService(map);\n      dispatch(setRestaurants([]));\n\n      const request = {\n        location: map.center,\n        radius: '200',\n        type: ['restaurant'],\n        query,\n      };\n\n      service.textSearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          dispatch(setRestaurants(results));\n        }\n      });\n    },\n    [dispatch, google]\n  );\n\n  const getDetails = useCallback(\n    (placeId) => {\n      const service = new google.maps.places.PlacesService(map);\n      dispatch(setRestaurant(null));\n\n      const request = {\n        placeId,\n        fields: ['name', 'opening_hours', 'formatted_address', 'formatted_phone_number'],\n      };\n\n      service.getDetails(request, (place, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          dispatch(setRestaurant(place));\n        }\n      });\n    },\n    [google, map, dispatch]\n  );\n\n  useEffect(() => {\n    if (query) {\n      searchByQuery(map, query);\n    }\n  }, [searchByQuery, query, map]);\n\n  useEffect(() => {\n    if (placeId) {\n      getDetails(placeId);\n    }\n  }, [placeId, getDetails]);\n\n  const searchNearby = (map, center) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      location: center,\n      radius: '20000',\n      type: ['restaurant'],\n    };\n\n    service.nearbySearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        dispatch(setRestaurants(results));\n      }\n    });\n  };\n\n  function onMapReady(_, map) {\n    setMap(map);\n    searchNearby(map, map.center);\n  }\n\n  return (\n    <Map\n      google={google}\n      centerAroundCurrentLocation\n      onReady={onMapReady}\n      onRecenter={onMapReady}\n      zoom={15}\n      {...props}>\n      {restaurants.map((restaurant) => (\n        <Marker\n          key={restaurant.place_id}\n          name={restaurant.name}\n          position={{\n            lat: restaurant.geometry.location.lat(),\n            lng: restaurant.geometry.location.lng(),\n          }}\n        />\n      ))}\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n  language: 'pt-BR',\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}